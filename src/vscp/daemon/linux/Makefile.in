# =========================================================================
#                      Autogenerated from Makefile.in
# =========================================================================

# Package version
MAJOR_VERSION=@MAJOR_VERSION@
MINOR_VERSION=@MINOR_VERSION@
RELEASE_VERSION=@RELEASE_VERSION@
BUILD_VERSION=@BUILD_VERSION@
PACKAGE_VERSION=@PACKAGE_VERSION@

# STATIC = yes if a static build is requested.
STATIC=@STATIC@
VSCP_PROJ_BASE_DIR=@VSCPDIR@

prefix = @prefix@
exec_prefix = @exec_prefix@
INSTALL = @INSTALL@
top_srcdir = @top_srcdir@
top_builddir = @top_builddir@

CC = @CC@
CXX = @CXX@

WARNINGS_HARD = -Werror -Wall -Wextra -pedantic -Wcast-align -Wcast-qual \
  -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self \
  -Wlogical-op -Wmissing-include-dirs -Wnoexcept -Wold-style-cast \
  -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo \
  -Wstrict-null-sentinel -Wstrict-overflow=5 -Wundef -Wno-unused \
  -Wno-variadic-macros -Wno-parentheses -fdiagnostics-show-option
WARNINGS_MEDIUM = -Wformat-security -Wformat=2 -Wmissing-include-dirs \
  -Wno-parentheses -Wformat=2 -Wlogical-op
WARNINGS = -Wall

VERSION_DEFS = -DMAJOR_VERSION=$(MAJOR_VERSION) -DMINOR_VERSION=$(MINOR_VERSION) \
        -DRELEASE_VERSION=$(RELEASE_VERSION) -DBUILD_VERSION=$(BUILD_VERSION)

CFLAGS = -std=c99 @CFLAGS@ ${WARNINGS} -DCBC -D_POSIX_SOURCE -I@top_srcdir@ \
	-I. \
	-I../../common \
	-I../../../common \
	-I../../../common/third_party/nlohmann \
	-I../../../common/third_party/sqlite3-3.30.1/ \
	-I../../../common/third_party
CFLAGS += $(CIVETWEB_FLAGS) 
CXXFLAGS = -std=c++11 @CXXFLAGS@ ${WARNINGS}
CPPFLAGS = @CPPFLAGS@ ${WARNINGS} -fno-var-tracking-assignments -I@top_srcdir@ \
	-I. \
	-I../../common \
	-I../../../common \
	-I../../../common/third_party/nlohmann \
	-I../../../common/third_party/sqlite3-3.30.1/ \
	-I../../../common/third_party
CPPFLAGS += $(CIVETWEB_FLAGS) 

LDFLAGS = @LDFLAGS@
EXTRALIBS = @EXTRALIBS@
DESTDIR=@DESTDIR@

prefix = @prefix@
exec_prefix = @exec_prefix@
STRIP = strip
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_DIR = /usr/bin/install -c -d
srcdir = .<
top_srcdir = .
top_builddir =
bindir = ${prefix}/sbin
libdir = ${prefix}/lib
datadir = ${prefix}/share
includedir = ${prefix}/include
DLLPREFIX = lib

### Variables: ###

DESTDIR =

VSCPD_OBJECTS =  vscpd.o \
	controlobject.o \
	devicethread.o \
	vscphelper.o \
	devicelist.o \
	mdf.o \
	guid.o \
	register.o \
	configfile.o \
	crc.o \
	crc8.o \
	randpassword.o \
	vscp_aes.o \
	fastpbkdf2.o \
	vscpmd5.o \
	vscpbase64.o \
	vscpdatetime.o \
	sqlite3.o

### Targets: ###

all: vscpd

vscpd.o: vscpd.cpp vscpd.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c vscpd.cpp -o $@ $(EXTRALIBS)

clientlist.o: ../../common/clientlist.cpp ../../common/clientlist.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/clientlist.cpp -o $@

controlobject.o: ../../common/controlobject.cpp ../../common/controlobject.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/controlobject.cpp -o $@

interfacelist.o: ../../common/interfacelist.cpp ../../common/interfacelist.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/interfacelist.cpp -o $@

devicethread.o: ../../common/devicethread.cpp ../../common/devicethread.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/devicethread.cpp -o $@

vscphelper.o: ../../common/vscphelper.cpp ../../common/vscphelper.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/vscphelper.cpp -o $@

automation.o: ../../common/automation.cpp ../../common/automation.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/automation.cpp -o $@

devicelist.o: ../../common/devicelist.cpp ../../common/devicelist.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/devicelist.cpp -o $@

guid.o: ../../common/guid.cpp ../../common/guid.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/guid.cpp -o $@

mdf.o: ../../common/mdf.cpp ../../common/mdf.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/mdf.cpp -o $@

register.o: ../../common/register.cpp ../../common/register.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/register.cpp -o $@

configfile.o: ../../../common/configfile.cpp ../../../common/configfile.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../../common/configfile.cpp -o $@

vscpdatetime.o: ../../common/vscpdatetime.cpp ../../common/vscpdatetime.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../common/vscpdatetime.cpp -o $@

dllist.o: ../../../common/dllist.c ../../../common/dllist.h
	$(CC) $(CFLAGS) -c ../../../common/dllist.c  -o $@

vscp_aes.o: ../../../common/vscp_aes.c ../../../common/vscp_aes.h
	$(CC) $(CFLAGS) -c ../../../common/vscp_aes.c -o $@

crc.o: ../../../common/crc.c ../../../common/crc.h
	$(CC) $(CFLAGS) -c ../../../common/crc.c -o $@

vscpbase64.o: ../../../common/vscpbase64.c ../../../common/vscpbase64.h
	$(CC) $(CFLAGS) -c ../../../common/vscpbase64.c -o $@

crc8.o: ../../../common/crc8.c ../../../common/crc8.h
	$(CC) $(CFLAGS) -c ../../../common/crc8.c -o $@

randpassword.o: ../../../common/randpassword.cpp ../../../common/randpassword.h
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c ../../../common/randpassword.cpp -o $@

fastpbkdf2.o: ../../../common/fastpbkdf2.c ../../../common/fastpbkdf2.h
	$(CC) $(CFLAGS) -c ../../../common/fastpbkdf2.c -o $@

vscpmd5.o: ../../../common/vscpmd5.c ../../../common/vscpmd5.h
	$(CC) $(CFLAGS) -c ../../../common/vscpmd5.c -o $@

sqlite3.o: ../../../common/third_party/sqlite3-3.30.1/sqlite3.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c  ../../../common/third_party/sqlite3-3.30.1/sqlite3.c -o $@

vscpd: $(VSCPD_OBJECTS)
	$(CXX) -o $@ $(VSCPD_OBJECTS) $(LDFLAGS) $(EXTRALIBS)

install: all install-folders install-configfile install-sample-certs
	$(STRIP) vscpd
	$(INSTALL_PROGRAM) -d $(DESTDIR)$(bindir)
	$(INSTALL_PROGRAM) vscpd $(DESTDIR)$(bindir)
	$(INSTALL_PROGRAM) -m 644 ../../../../install_files/unix/vscpd.conf $(DESTDIR)/etc/vscp/vscpd.conf
	cp ../../../../service/systemd/vscpd.service.notify /lib/systemd/system/vscpd.service
#	systemctl enable vscpd
#	systemctl start vscpd

install-folders:
	@echo "- Create folder structure."
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/logs/vscp
	$(INSTALL_PROGRAM) -d $(DESTDIR)/etc/vscp/certs
	$(INSTALL_PROGRAM) -d $(DESTDIR)/etc/vscp/ca-certificates
	$(INSTALL_PROGRAM) -d $(DESTDIR)/usr/share/vscp
	$(INSTALL_PROGRAM) -d $(DESTDIR)/usr/share/vscp/vscpd
	$(INSTALL_PROGRAM) -d $(DESTDIR)/usr/share/vscp/vscpd/certs
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/log/vscp
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/lib/vscp
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/lib/vscp/vscpd
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/lib/vscp/drivers
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/lib/vscp/drivers/level1
	$(INSTALL_PROGRAM) -d $(DESTDIR)/var/lib/vscp/drivers/level2
	$(INSTALL_PROGRAM) -d $(DESTDIR)/usr/lib/systemd/system/

# Install systemvinit startup
install-startup-systemvinit:
	@$(INSTALL_PROGRAM) -d $(DESTDIR)/etc
	$(INSTALL_PROGRAM) -d $(DESTDIR)/etc/init.d
	@echo "- Installing startup script."
	@if [ ! -e $(DESTDIR)/etc/init.d/vscpd ]; then\
		echo "- Copying startup script";\
		$(INSTALL_PROGRAM) -b -m755 service/systemvinit/vscpd.init $(DESTDIR)/etc/init.d/vscpd;\
		echo "- Installing startup script";\
		update-rc.d vscpd defaults;\
	fi

install-configfile:
	@echo "- Installing main configuration file."
	@mkdir -p $(DESTDIR)/etc/vscp
	@if [ ! -e $(DESTDIR)/etc/vscp/vscpd.conf ]; then\
	    $(INSTALL_PROGRAM) -b -m744 ../../../../install_files/unix/vscpd.conf $(DESTDIR)/etc/vscp/vscpd.conf;\
	else\
	    $(INSTALL_PROGRAM) -b -m744 ../../../../install_files/unix/vscpd.conf $(DESTDIR)/etc/vscp/vscpd.conf.`date +'%Y%m%d'`;\
	fi

install-sample-certs:
	@echo "- Installing server sample certificat."
	@if [ ! -e @VSCPDIR@/certs/server.pem ]; then\
	    $(INSTALL_PROGRAM) -b -m744 ../../../../install_files/certs/server.pem $(DESTDIR)/usr/share/vscp/vscpd/certs;\
	fi

	@echo "- Installing client sample certificat."
	@if [ ! -e @VSCPDIR@/certs/client.pem ]; then\
	    $(INSTALL_PROGRAM) -b -m744 ../../../../install_files/certs/client.pem $(DESTDIR)/etc/vscp/certs;\
	fi

uninstall:
	@echo "- Uninstall vscpd."
	rm -rf $(DESTDIR)/usr/share/vscpd
	rm -rf $(DESTDIR)/var/lib/vscp
	rm -rf $(DESTDIR)/var/log/vscp
	rm -rf $(DESTDIR)/var/web-vscp
	rm -rf $(DESTDIR)/etc/vscp/certs
	rm -rf $(DESTDIR)/etc/vscp/ca-certificats
	rm -f $(DESTDIR)/etc/init.d/vscpd
	rm -rf $(DESTDIR)/var/logs/vscp
	em -rf $(DESTDIR)/var/web-vscp

	rm -f $(DESTDIR)/etc/vscp/vscpd.conf
	rm -rf $(DESTDIR)/etc/vscp/vscpd.conf.*
	# Remove /etc/vscp if empty
	if [ ! "$(ls -A /etc/vscp)" ]; then\
		rm -rf $(DESTDIR)/etc/vscp;\
	fi
	
	rm -rf $(DESTDIR)/usr/share/vscp/vscpd
	# Remove /usr/share/vscp if empty
	if [ ! "$(ls -A /usr/share/vscp)" ]; then\
		rm -rf $(DESTDIR)/usr/share/vscp;\
	fi

	rm -rf $(DESTDIR)/var/lib/vscp/vscpd
	# Remove /var/lib/vscp if empty
	if [ ! "$(ls -A /var/lib/vscp)" ]; then\
		rm -rf $(DESTDIR)/var/lib/vscp;\
	fi

	rm -rf $(DESTDIR)/usr/share/vscp/vscpd
	# Remove /usr/share/vscp if empty
	if [ ! "$(ls -A /usr/share/vscp)" ]; then\
		rm -rf $(DESTDIR)/usr/share/vscp;\
	fi

install-strip: install

deb:    all
	echo "\n" | ./builddist.sh
	@mkdir -p ../../../../dist
	@mv *.deb ../../../../dist

clean:
	rm -rf ./.deps ./.pch
	rm -f *.o
	rm -f ./*.o
	rm -f ../../common/*.o
	rm -f ../../../common/*.o
	rm -f ../../../vscp/common/*.o
	rm -f *.deb
	rm -f *.gz
	rm -f vscpd

distclean: clean
	rm -f config.cache config.log config.status bk-deps bk-make-pch shared-ld-sh Makefile

$(ALWAYS_BUILD):  .FORCE

.FORCE:

# Include dependency info, if present:
-include .deps/*.d

.PHONY: all install uninstall clean distclean data .FORCE
